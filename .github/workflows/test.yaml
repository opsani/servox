name: Run Tests
on:
  push:
    paths-ignore:
    - 'docs/**'
    - '*.md'
    - Makefile
  pull_request:
    paths-ignore:
    - 'docs/**'
    - '*.md'
    - Makefile
    branches:
      - main

jobs:
  pre_job:
    runs-on: ubuntu-latest
    outputs:
      should_skip: ${{ steps.skip_check.outputs.should_skip }}
    steps:
      - id: skip_check
        uses: fkirc/skip-duplicate-actions@master
        with:
          concurrent_skipping: 'same_content'
          paths_ignore: '["**/README.md", "**/docs/**", "CHANGELOG.md"]'
          do_not_skip: '["pull_request", "workflow_dispatch", "schedule"]'

  setup_build:
    needs: pre_job
    runs-on: ubuntu-latest
    if: needs.pre_job.outputs.should_skip != 'true'
    outputs:
      python-version: ${{ steps.python-version.outputs.python-version }}
    steps:
      - uses: actions/checkout@master
      - name: Output Python version
        id: python-version
        run: |
          echo "::set-output name=python-version::$(cat .python-version)"
      - uses: actions/setup-python@v2.1.3
        id: setup-python
        with:
          python-version: ${{ steps.python-version.outputs.python-version }}
          architecture: x64
      - name: Set up Poetry cache
        uses: actions/cache@v2
        id: cached-poetry
        with:
          path: ~/.local
          key: poetry-${{ runner.os }}-1.1.7a-python-${{ steps.setup-python.outputs.python-version }}
      - name: Install and configure Poetry
        uses: snok/install-poetry@v1.3
        if: steps.cached-poetry.outputs.cache-hit != 'true'
        with:
          version: 1.1.7
          virtualenvs-create: true
          virtualenvs-in-project: true
      - name: Initialize Poetry
        # NOTE: We have to apply the config options to cover cases where the install-poetry action is skipped but we have new deps
        run: |
          echo "$HOME/.local/bin" >> $GITHUB_PATH
          poetry config virtualenvs.create true
          poetry config virtualenvs.in-project true
      - name: Set up dependencies cache
        uses: actions/cache@v2
        id: cached-poetry-dependencies
        with:
          path: .venv
          key: ".venv-${{ runner.os }}-\
            python-${{ steps.setup-python.outputs.python-version }}-\
            ${{ hashFiles('**/poetry.lock') }}"
      - name: Install dependencies
        if: steps.cached-poetry-dependencies.outputs.cache-hit != 'true'
        run: poetry install --no-interaction --no-root
      # NOTE: Install our root project into the venv cache without busting it
      - name: Set up root + dependencies cache
        uses: actions/cache@v2
        id: cached-project
        with:
          path: .venv
          key: ".venv-${{ runner.os }}-\
            python-${{ steps.setup-python.outputs.python-version }}-\
            ${{ hashFiles('**/poetry.lock', 'servo/**/*.py') }}"
      - name: Install root project
        # NOTE: Skipping root project install accelerates cases where only tests have changed
        if: steps.cached-project.outputs.cache-hit != 'true'
        run: poetry install --no-interaction

  unit:
    needs:
      - pre_job
      - setup_build
    if: needs.pre_job.outputs.should_skip != 'true'
    name: Run Unit Tests
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@master
    - uses: actions/setup-python@v2.1.3
      id: setup-python
      with:
        python-version: ${{ needs.setup_build.outputs.python-version }}
        architecture: x64
    - name: Set up root + dependencies cache
      uses: actions/cache@v2
      id: cached-project
      with:
        path: .venv
        key: ".venv-${{ runner.os }}-\
          python-${{ steps.setup-python.outputs.python-version }}-\
          ${{ hashFiles('**/poetry.lock', 'servo/**/*.py') }}"
    - name: Run tests
      run: |
        source .venv/bin/activate
        pytest -T unit -n 6 \
          --cov=servo --cov-config=setup.cfg --doctest-modules \
          --cov-report=term-missing:skip-covered \
          --cov-report=xml:artifacts/coverage.xml --cov-report=html:artifacts/coverage-html \
          --junitxml=artifacts/report.xml --html=artifacts/report.html \
          --self-contained-html
    - uses: actions/upload-artifact@v2
      with:
        name: test-reports
        path: artifacts/
    - name: Test CLI entrypoints
      run: |
        source .venv/bin/activate
        servo version

  integration:
    name: Run Integration Tests
    runs-on: ubuntu-latest
    needs:
      - pre_job
      - setup_build
    if: |
      needs.pre_job.outputs.should_skip != 'true' &&
      github.actor != 'dependabot[bot]' &&
      (github.ref == 'refs/heads/main' ||
      startsWith(github.ref, 'refs/heads/release/') ||
      startsWith(github.ref, 'refs/heads/bugfix/') ||
      startsWith(github.ref, 'refs/tags/') ||
      github.event_name == 'pull_request' ||
      contains(github.event.head_commit.message, '#test:integration'))
    steps:
    - uses: actions/checkout@master
    - uses: actions/setup-python@v2.1.3
      id: setup-python
      with:
        python-version: ${{ needs.setup_build.outputs.python-version }}
        architecture: x64
    - name: Install Vegeta
      run: |
        wget https://github.com/tsenart/vegeta/releases/download/v12.8.4/vegeta_12.8.4_linux_amd64.tar.gz
        tar xfz vegeta_12.8.4_linux_amd64.tar.gz
        sudo mv vegeta /usr/local/bin/vegeta
    - name: Set up root + dependencies cache
      uses: actions/cache@v2
      id: cached-project
      with:
        path: .venv
        key: ".venv-${{ runner.os }}-\
          python-${{ steps.setup-python.outputs.python-version }}-\
          ${{ hashFiles('**/poetry.lock', 'servo/**/*.py') }}"
    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v1
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: us-west-2
    - name: Create tests/kubeconfig
      run: |
        mkdir ~/.kube
        echo "$KUBE_CONFIG_DATA" | base64 --decode > $HOME/.kube/config
        kubectl config view --minify --flatten > tests/kubeconfig
      shell: bash
      env:
        KUBE_CONFIG_DATA: ${{ secrets.KUBE_CONFIG_DATA }}
    - name: Install AWS IAM Authenticator
      uses: prepor/action-aws-iam-authenticator@master
    - name: Run integration tests
      run: |
        source .venv/bin/activate
        pytest -n 8 \
          -T integration --verbose --durations=0 --durations-min=5
    - uses: actions/upload-artifact@v2
      with:
        name: integration-test-logs
        path: logs/

  system:
    name: Run System Tests
    runs-on: ubuntu-latest
    needs:
      - pre_job
      - setup_build
    if: |
      needs.pre_job.outputs.should_skip != 'true' &&
      github.actor != 'dependabot[bot]' &&
      (github.ref == 'refs/heads/main' ||
      startsWith(github.ref, 'refs/heads/release/') ||
      startsWith(github.ref, 'refs/heads/bugfix/') ||
      startsWith(github.ref, 'refs/tags/') ||
      github.event_name == 'pull_request' ||
      contains(github.event.head_commit.message, '#test:system'))
    steps:
    - uses: actions/checkout@master
    - uses: actions/setup-python@v2.1.3
      id: setup-python
      with:
        python-version: ${{ needs.setup_build.outputs.python-version }}
        architecture: x64
    - name: Set up Poetry cache
      uses: actions/cache@v2
      id: cached-poetry
      with:
        path: ~/.local
        key: poetry-${{ runner.os }}-1.1.7a-python-${{ steps.setup-python.outputs.python-version }}
    - name: Ensure Poetry is on GITHUB_PATH
      run: |
        echo "$HOME/.local/bin" >> $GITHUB_PATH
    - name: Set up root + dependencies cache
      uses: actions/cache@v2
      id: cached-project
      with:
        path: .venv
        key: ".venv-${{ runner.os }}-\
          python-${{ steps.setup-python.outputs.python-version }}-\
          ${{ hashFiles('**/poetry.lock', 'servo/**/*.py') }}"
    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v1
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: us-west-2
    - name: Create tests/kubeconfig
      run: |
        mkdir ~/.kube
        echo "$KUBE_CONFIG_DATA" | base64 --decode > $HOME/.kube/config
        kubectl config view --minify --flatten > tests/kubeconfig
      shell: bash
      env:
        KUBE_CONFIG_DATA: ${{ secrets.KUBE_CONFIG_DATA }}
    - name: Fix permissions
      run: |
        if [ -d /home/runner/.kube ]; then
          sudo chown -R runner:docker /home/runner/.kube
        else
          mkdir /home/runner/.kube
        fi
        sudo chown runner:docker tests/kubeconfig
    - name: Rename EKS cluster to eks
      run: |
        kubectl config rename-context \
          --kubeconfig=tests/kubeconfig \
          kubetest eks
    - name: Create kind cluster
      uses: helm/kind-action@v1.2.0
      with:
        cluster_name: kind
    - name: Display kind kubeconfig
      run: kind get clusters && kind get kubeconfig --name kind
    - name: Merge kind kubeconfig
      run: kind export kubeconfig --name kind --kubeconfig tests/kubeconfig
    - name: Install AWS IAM Authenticator
      uses: prepor/action-aws-iam-authenticator@master
    - name: Run system tests
      run: |
        source .venv/bin/activate
        pytest -n 6 \
          -T system --verbose --durations=0 --durations-min=5
    - uses: actions/upload-artifact@v2
      with:
        name: system-test-logs
        path: logs/
